// Code generated by protoc-gen-go. DO NOT EDIT.
// source: familog.proto

/*
Package familog is a generated protocol buffer package.

It is generated from these files:
	familog.proto

It has these top-level messages:
	User
	Diary
	DiaryEntry
	StartDiaryRequest
	StartDiaryResponse
	SubscribeDiaryRequest
	SubscribeDiaryResponse
	AllDiariesRequest
	AllDiariesResponse
	FindDiaryEntriesRequest
	FindDiaryEntriesResponse
	ReadDiaryEntryRequest
	ReadDiaryEntryResponse
	DiaryEntryForm
	PublishDiaryEntryRequest
	PublishDiaryEntryResponse
	UpdateDiaryEntryRequest
	UpdateDiaryEntryResponse
	ShowMyProfileRequest
	ShowMyProfileResponse
	FindProfileByUserIdRequest
	FindProfileByUserIdResponse
	UpdateProfileRequest
	UpdateProfileResponse
*/
package familog

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type User struct {
	Id        int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	AvatarUrl string `protobuf:"bytes,3,opt,name=avatar_url,json=avatarUrl" json:"avatar_url,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *User) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetAvatarUrl() string {
	if m != nil {
		return m.AvatarUrl
	}
	return ""
}

type Diary struct {
	Id    int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=Title" json:"Title,omitempty"`
}

func (m *Diary) Reset()                    { *m = Diary{} }
func (m *Diary) String() string            { return proto.CompactTextString(m) }
func (*Diary) ProtoMessage()               {}
func (*Diary) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Diary) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Diary) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type DiaryEntry struct {
	Id            int64                      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Body          string                     `protobuf:"bytes,2,opt,name=body" json:"body,omitempty"`
	Emoji         string                     `protobuf:"bytes,3,opt,name=emoji" json:"emoji,omitempty"`
	User          *User                      `protobuf:"bytes,4,opt,name=user" json:"user,omitempty"`
	CoverImageUrl string                     `protobuf:"bytes,5,opt,name=cover_image_url,json=coverImageUrl" json:"cover_image_url,omitempty"`
	ImageUrls     []string                   `protobuf:"bytes,6,rep,name=image_urls,json=imageUrls" json:"image_urls,omitempty"`
	PublishedAt   *google_protobuf.Timestamp `protobuf:"bytes,7,opt,name=published_at,json=publishedAt" json:"published_at,omitempty"`
}

func (m *DiaryEntry) Reset()                    { *m = DiaryEntry{} }
func (m *DiaryEntry) String() string            { return proto.CompactTextString(m) }
func (*DiaryEntry) ProtoMessage()               {}
func (*DiaryEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DiaryEntry) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DiaryEntry) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *DiaryEntry) GetEmoji() string {
	if m != nil {
		return m.Emoji
	}
	return ""
}

func (m *DiaryEntry) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *DiaryEntry) GetCoverImageUrl() string {
	if m != nil {
		return m.CoverImageUrl
	}
	return ""
}

func (m *DiaryEntry) GetImageUrls() []string {
	if m != nil {
		return m.ImageUrls
	}
	return nil
}

func (m *DiaryEntry) GetPublishedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.PublishedAt
	}
	return nil
}

type StartDiaryRequest struct {
	Title string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
}

func (m *StartDiaryRequest) Reset()                    { *m = StartDiaryRequest{} }
func (m *StartDiaryRequest) String() string            { return proto.CompactTextString(m) }
func (*StartDiaryRequest) ProtoMessage()               {}
func (*StartDiaryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *StartDiaryRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type StartDiaryResponse struct {
	Diary *Diary `protobuf:"bytes,1,opt,name=diary" json:"diary,omitempty"`
}

func (m *StartDiaryResponse) Reset()                    { *m = StartDiaryResponse{} }
func (m *StartDiaryResponse) String() string            { return proto.CompactTextString(m) }
func (*StartDiaryResponse) ProtoMessage()               {}
func (*StartDiaryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *StartDiaryResponse) GetDiary() *Diary {
	if m != nil {
		return m.Diary
	}
	return nil
}

type SubscribeDiaryRequest struct {
	SecretCode string `protobuf:"bytes,1,opt,name=secret_code,json=secretCode" json:"secret_code,omitempty"`
}

func (m *SubscribeDiaryRequest) Reset()                    { *m = SubscribeDiaryRequest{} }
func (m *SubscribeDiaryRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribeDiaryRequest) ProtoMessage()               {}
func (*SubscribeDiaryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SubscribeDiaryRequest) GetSecretCode() string {
	if m != nil {
		return m.SecretCode
	}
	return ""
}

type SubscribeDiaryResponse struct {
}

func (m *SubscribeDiaryResponse) Reset()                    { *m = SubscribeDiaryResponse{} }
func (m *SubscribeDiaryResponse) String() string            { return proto.CompactTextString(m) }
func (*SubscribeDiaryResponse) ProtoMessage()               {}
func (*SubscribeDiaryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type AllDiariesRequest struct {
}

func (m *AllDiariesRequest) Reset()                    { *m = AllDiariesRequest{} }
func (m *AllDiariesRequest) String() string            { return proto.CompactTextString(m) }
func (*AllDiariesRequest) ProtoMessage()               {}
func (*AllDiariesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type AllDiariesResponse struct {
	Diaries []*Diary `protobuf:"bytes,1,rep,name=diaries" json:"diaries,omitempty"`
}

func (m *AllDiariesResponse) Reset()                    { *m = AllDiariesResponse{} }
func (m *AllDiariesResponse) String() string            { return proto.CompactTextString(m) }
func (*AllDiariesResponse) ProtoMessage()               {}
func (*AllDiariesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *AllDiariesResponse) GetDiaries() []*Diary {
	if m != nil {
		return m.Diaries
	}
	return nil
}

type FindDiaryEntriesRequest struct {
	DiaryId int64 `protobuf:"varint,1,opt,name=diary_id,json=diaryId" json:"diary_id,omitempty"`
}

func (m *FindDiaryEntriesRequest) Reset()                    { *m = FindDiaryEntriesRequest{} }
func (m *FindDiaryEntriesRequest) String() string            { return proto.CompactTextString(m) }
func (*FindDiaryEntriesRequest) ProtoMessage()               {}
func (*FindDiaryEntriesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *FindDiaryEntriesRequest) GetDiaryId() int64 {
	if m != nil {
		return m.DiaryId
	}
	return 0
}

type FindDiaryEntriesResponse struct {
	DiaryEntries []*DiaryEntry `protobuf:"bytes,1,rep,name=diary_entries,json=diaryEntries" json:"diary_entries,omitempty"`
}

func (m *FindDiaryEntriesResponse) Reset()                    { *m = FindDiaryEntriesResponse{} }
func (m *FindDiaryEntriesResponse) String() string            { return proto.CompactTextString(m) }
func (*FindDiaryEntriesResponse) ProtoMessage()               {}
func (*FindDiaryEntriesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *FindDiaryEntriesResponse) GetDiaryEntries() []*DiaryEntry {
	if m != nil {
		return m.DiaryEntries
	}
	return nil
}

type ReadDiaryEntryRequest struct {
	DiaryEntryId int64 `protobuf:"varint,1,opt,name=diary_entry_id,json=diaryEntryId" json:"diary_entry_id,omitempty"`
}

func (m *ReadDiaryEntryRequest) Reset()                    { *m = ReadDiaryEntryRequest{} }
func (m *ReadDiaryEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadDiaryEntryRequest) ProtoMessage()               {}
func (*ReadDiaryEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ReadDiaryEntryRequest) GetDiaryEntryId() int64 {
	if m != nil {
		return m.DiaryEntryId
	}
	return 0
}

type ReadDiaryEntryResponse struct {
	DiaryEntries []*DiaryEntry `protobuf:"bytes,1,rep,name=diary_entries,json=diaryEntries" json:"diary_entries,omitempty"`
}

func (m *ReadDiaryEntryResponse) Reset()                    { *m = ReadDiaryEntryResponse{} }
func (m *ReadDiaryEntryResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadDiaryEntryResponse) ProtoMessage()               {}
func (*ReadDiaryEntryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ReadDiaryEntryResponse) GetDiaryEntries() []*DiaryEntry {
	if m != nil {
		return m.DiaryEntries
	}
	return nil
}

type DiaryEntryForm struct {
	Body           string   `protobuf:"bytes,1,opt,name=body" json:"body,omitempty"`
	Emoji          string   `protobuf:"bytes,2,opt,name=emoji" json:"emoji,omitempty"`
	CoverImageBlob string   `protobuf:"bytes,3,opt,name=cover_image_blob,json=coverImageBlob" json:"cover_image_blob,omitempty"`
	ImageBlobs     []string `protobuf:"bytes,4,rep,name=image_blobs,json=imageBlobs" json:"image_blobs,omitempty"`
}

func (m *DiaryEntryForm) Reset()                    { *m = DiaryEntryForm{} }
func (m *DiaryEntryForm) String() string            { return proto.CompactTextString(m) }
func (*DiaryEntryForm) ProtoMessage()               {}
func (*DiaryEntryForm) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *DiaryEntryForm) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *DiaryEntryForm) GetEmoji() string {
	if m != nil {
		return m.Emoji
	}
	return ""
}

func (m *DiaryEntryForm) GetCoverImageBlob() string {
	if m != nil {
		return m.CoverImageBlob
	}
	return ""
}

func (m *DiaryEntryForm) GetImageBlobs() []string {
	if m != nil {
		return m.ImageBlobs
	}
	return nil
}

type PublishDiaryEntryRequest struct {
	DiaryEntryForm *DiaryEntryForm `protobuf:"bytes,1,opt,name=diary_entry_form,json=diaryEntryForm" json:"diary_entry_form,omitempty"`
	DiaryId        int64           `protobuf:"varint,2,opt,name=diary_id,json=diaryId" json:"diary_id,omitempty"`
}

func (m *PublishDiaryEntryRequest) Reset()                    { *m = PublishDiaryEntryRequest{} }
func (m *PublishDiaryEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*PublishDiaryEntryRequest) ProtoMessage()               {}
func (*PublishDiaryEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *PublishDiaryEntryRequest) GetDiaryEntryForm() *DiaryEntryForm {
	if m != nil {
		return m.DiaryEntryForm
	}
	return nil
}

func (m *PublishDiaryEntryRequest) GetDiaryId() int64 {
	if m != nil {
		return m.DiaryId
	}
	return 0
}

type PublishDiaryEntryResponse struct {
	DiaryEntry *DiaryEntry `protobuf:"bytes,1,opt,name=diary_entry,json=diaryEntry" json:"diary_entry,omitempty"`
}

func (m *PublishDiaryEntryResponse) Reset()                    { *m = PublishDiaryEntryResponse{} }
func (m *PublishDiaryEntryResponse) String() string            { return proto.CompactTextString(m) }
func (*PublishDiaryEntryResponse) ProtoMessage()               {}
func (*PublishDiaryEntryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *PublishDiaryEntryResponse) GetDiaryEntry() *DiaryEntry {
	if m != nil {
		return m.DiaryEntry
	}
	return nil
}

type UpdateDiaryEntryRequest struct {
	DiaryEntryId   int64           `protobuf:"varint,1,opt,name=diary_entry_id,json=diaryEntryId" json:"diary_entry_id,omitempty"`
	DiaryEntryForm *DiaryEntryForm `protobuf:"bytes,2,opt,name=diary_entry_form,json=diaryEntryForm" json:"diary_entry_form,omitempty"`
}

func (m *UpdateDiaryEntryRequest) Reset()                    { *m = UpdateDiaryEntryRequest{} }
func (m *UpdateDiaryEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateDiaryEntryRequest) ProtoMessage()               {}
func (*UpdateDiaryEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *UpdateDiaryEntryRequest) GetDiaryEntryId() int64 {
	if m != nil {
		return m.DiaryEntryId
	}
	return 0
}

func (m *UpdateDiaryEntryRequest) GetDiaryEntryForm() *DiaryEntryForm {
	if m != nil {
		return m.DiaryEntryForm
	}
	return nil
}

type UpdateDiaryEntryResponse struct {
	DiaryEntry *DiaryEntry `protobuf:"bytes,1,opt,name=diary_entry,json=diaryEntry" json:"diary_entry,omitempty"`
}

func (m *UpdateDiaryEntryResponse) Reset()                    { *m = UpdateDiaryEntryResponse{} }
func (m *UpdateDiaryEntryResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateDiaryEntryResponse) ProtoMessage()               {}
func (*UpdateDiaryEntryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *UpdateDiaryEntryResponse) GetDiaryEntry() *DiaryEntry {
	if m != nil {
		return m.DiaryEntry
	}
	return nil
}

type ShowMyProfileRequest struct {
}

func (m *ShowMyProfileRequest) Reset()                    { *m = ShowMyProfileRequest{} }
func (m *ShowMyProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*ShowMyProfileRequest) ProtoMessage()               {}
func (*ShowMyProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

type ShowMyProfileResponse struct {
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *ShowMyProfileResponse) Reset()                    { *m = ShowMyProfileResponse{} }
func (m *ShowMyProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*ShowMyProfileResponse) ProtoMessage()               {}
func (*ShowMyProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *ShowMyProfileResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type FindProfileByUserIdRequest struct {
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *FindProfileByUserIdRequest) Reset()                    { *m = FindProfileByUserIdRequest{} }
func (m *FindProfileByUserIdRequest) String() string            { return proto.CompactTextString(m) }
func (*FindProfileByUserIdRequest) ProtoMessage()               {}
func (*FindProfileByUserIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *FindProfileByUserIdRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type FindProfileByUserIdResponse struct {
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *FindProfileByUserIdResponse) Reset()                    { *m = FindProfileByUserIdResponse{} }
func (m *FindProfileByUserIdResponse) String() string            { return proto.CompactTextString(m) }
func (*FindProfileByUserIdResponse) ProtoMessage()               {}
func (*FindProfileByUserIdResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *FindProfileByUserIdResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type UpdateProfileRequest struct {
	Name       string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	AvatarBlob string `protobuf:"bytes,2,opt,name=avatar_blob,json=avatarBlob" json:"avatar_blob,omitempty"`
}

func (m *UpdateProfileRequest) Reset()                    { *m = UpdateProfileRequest{} }
func (m *UpdateProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateProfileRequest) ProtoMessage()               {}
func (*UpdateProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *UpdateProfileRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateProfileRequest) GetAvatarBlob() string {
	if m != nil {
		return m.AvatarBlob
	}
	return ""
}

type UpdateProfileResponse struct {
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *UpdateProfileResponse) Reset()                    { *m = UpdateProfileResponse{} }
func (m *UpdateProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateProfileResponse) ProtoMessage()               {}
func (*UpdateProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *UpdateProfileResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func init() {
	proto.RegisterType((*User)(nil), "familog.User")
	proto.RegisterType((*Diary)(nil), "familog.Diary")
	proto.RegisterType((*DiaryEntry)(nil), "familog.DiaryEntry")
	proto.RegisterType((*StartDiaryRequest)(nil), "familog.StartDiaryRequest")
	proto.RegisterType((*StartDiaryResponse)(nil), "familog.StartDiaryResponse")
	proto.RegisterType((*SubscribeDiaryRequest)(nil), "familog.SubscribeDiaryRequest")
	proto.RegisterType((*SubscribeDiaryResponse)(nil), "familog.SubscribeDiaryResponse")
	proto.RegisterType((*AllDiariesRequest)(nil), "familog.AllDiariesRequest")
	proto.RegisterType((*AllDiariesResponse)(nil), "familog.AllDiariesResponse")
	proto.RegisterType((*FindDiaryEntriesRequest)(nil), "familog.FindDiaryEntriesRequest")
	proto.RegisterType((*FindDiaryEntriesResponse)(nil), "familog.FindDiaryEntriesResponse")
	proto.RegisterType((*ReadDiaryEntryRequest)(nil), "familog.ReadDiaryEntryRequest")
	proto.RegisterType((*ReadDiaryEntryResponse)(nil), "familog.ReadDiaryEntryResponse")
	proto.RegisterType((*DiaryEntryForm)(nil), "familog.DiaryEntryForm")
	proto.RegisterType((*PublishDiaryEntryRequest)(nil), "familog.PublishDiaryEntryRequest")
	proto.RegisterType((*PublishDiaryEntryResponse)(nil), "familog.PublishDiaryEntryResponse")
	proto.RegisterType((*UpdateDiaryEntryRequest)(nil), "familog.UpdateDiaryEntryRequest")
	proto.RegisterType((*UpdateDiaryEntryResponse)(nil), "familog.UpdateDiaryEntryResponse")
	proto.RegisterType((*ShowMyProfileRequest)(nil), "familog.ShowMyProfileRequest")
	proto.RegisterType((*ShowMyProfileResponse)(nil), "familog.ShowMyProfileResponse")
	proto.RegisterType((*FindProfileByUserIdRequest)(nil), "familog.FindProfileByUserIdRequest")
	proto.RegisterType((*FindProfileByUserIdResponse)(nil), "familog.FindProfileByUserIdResponse")
	proto.RegisterType((*UpdateProfileRequest)(nil), "familog.UpdateProfileRequest")
	proto.RegisterType((*UpdateProfileResponse)(nil), "familog.UpdateProfileResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Familog service

type FamilogClient interface {
	// 日記を始める
	StartDiary(ctx context.Context, in *StartDiaryRequest, opts ...grpc.CallOption) (*StartDiaryResponse, error)
	// 日記を購読する
	SubscribeDiary(ctx context.Context, in *SubscribeDiaryRequest, opts ...grpc.CallOption) (*SubscribeDiaryResponse, error)
	// 日記帳を検索する
	AllDiaries(ctx context.Context, in *AllDiariesRequest, opts ...grpc.CallOption) (*AllDiariesResponse, error)
	// 日記を検索する
	FindDiaryEntries(ctx context.Context, in *FindDiaryEntriesRequest, opts ...grpc.CallOption) (*FindDiaryEntriesResponse, error)
	// 日記をみる
	ReadDiaryEntry(ctx context.Context, in *ReadDiaryEntryRequest, opts ...grpc.CallOption) (*ReadDiaryEntryResponse, error)
	// 日記を投稿する
	PublishDiaryEntry(ctx context.Context, in *PublishDiaryEntryRequest, opts ...grpc.CallOption) (*PublishDiaryEntryResponse, error)
	// 日記を更新する
	UpdateDiaryEntry(ctx context.Context, in *UpdateDiaryEntryRequest, opts ...grpc.CallOption) (*UpdateDiaryEntryResponse, error)
	// 自分のプロフィールを表示する
	ShowMyProfile(ctx context.Context, in *ShowMyProfileRequest, opts ...grpc.CallOption) (*ShowMyProfileResponse, error)
	// 他のプロフィールを表示する
	FindProfileByUserId(ctx context.Context, in *FindProfileByUserIdRequest, opts ...grpc.CallOption) (*FindProfileByUserIdResponse, error)
	// プロフィールを更新する
	UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error)
}

type familogClient struct {
	cc *grpc.ClientConn
}

func NewFamilogClient(cc *grpc.ClientConn) FamilogClient {
	return &familogClient{cc}
}

func (c *familogClient) StartDiary(ctx context.Context, in *StartDiaryRequest, opts ...grpc.CallOption) (*StartDiaryResponse, error) {
	out := new(StartDiaryResponse)
	err := grpc.Invoke(ctx, "/familog.Familog/StartDiary", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familogClient) SubscribeDiary(ctx context.Context, in *SubscribeDiaryRequest, opts ...grpc.CallOption) (*SubscribeDiaryResponse, error) {
	out := new(SubscribeDiaryResponse)
	err := grpc.Invoke(ctx, "/familog.Familog/SubscribeDiary", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familogClient) AllDiaries(ctx context.Context, in *AllDiariesRequest, opts ...grpc.CallOption) (*AllDiariesResponse, error) {
	out := new(AllDiariesResponse)
	err := grpc.Invoke(ctx, "/familog.Familog/AllDiaries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familogClient) FindDiaryEntries(ctx context.Context, in *FindDiaryEntriesRequest, opts ...grpc.CallOption) (*FindDiaryEntriesResponse, error) {
	out := new(FindDiaryEntriesResponse)
	err := grpc.Invoke(ctx, "/familog.Familog/FindDiaryEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familogClient) ReadDiaryEntry(ctx context.Context, in *ReadDiaryEntryRequest, opts ...grpc.CallOption) (*ReadDiaryEntryResponse, error) {
	out := new(ReadDiaryEntryResponse)
	err := grpc.Invoke(ctx, "/familog.Familog/ReadDiaryEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familogClient) PublishDiaryEntry(ctx context.Context, in *PublishDiaryEntryRequest, opts ...grpc.CallOption) (*PublishDiaryEntryResponse, error) {
	out := new(PublishDiaryEntryResponse)
	err := grpc.Invoke(ctx, "/familog.Familog/PublishDiaryEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familogClient) UpdateDiaryEntry(ctx context.Context, in *UpdateDiaryEntryRequest, opts ...grpc.CallOption) (*UpdateDiaryEntryResponse, error) {
	out := new(UpdateDiaryEntryResponse)
	err := grpc.Invoke(ctx, "/familog.Familog/UpdateDiaryEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familogClient) ShowMyProfile(ctx context.Context, in *ShowMyProfileRequest, opts ...grpc.CallOption) (*ShowMyProfileResponse, error) {
	out := new(ShowMyProfileResponse)
	err := grpc.Invoke(ctx, "/familog.Familog/ShowMyProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familogClient) FindProfileByUserId(ctx context.Context, in *FindProfileByUserIdRequest, opts ...grpc.CallOption) (*FindProfileByUserIdResponse, error) {
	out := new(FindProfileByUserIdResponse)
	err := grpc.Invoke(ctx, "/familog.Familog/FindProfileByUserId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familogClient) UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error) {
	out := new(UpdateProfileResponse)
	err := grpc.Invoke(ctx, "/familog.Familog/UpdateProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Familog service

type FamilogServer interface {
	// 日記を始める
	StartDiary(context.Context, *StartDiaryRequest) (*StartDiaryResponse, error)
	// 日記を購読する
	SubscribeDiary(context.Context, *SubscribeDiaryRequest) (*SubscribeDiaryResponse, error)
	// 日記帳を検索する
	AllDiaries(context.Context, *AllDiariesRequest) (*AllDiariesResponse, error)
	// 日記を検索する
	FindDiaryEntries(context.Context, *FindDiaryEntriesRequest) (*FindDiaryEntriesResponse, error)
	// 日記をみる
	ReadDiaryEntry(context.Context, *ReadDiaryEntryRequest) (*ReadDiaryEntryResponse, error)
	// 日記を投稿する
	PublishDiaryEntry(context.Context, *PublishDiaryEntryRequest) (*PublishDiaryEntryResponse, error)
	// 日記を更新する
	UpdateDiaryEntry(context.Context, *UpdateDiaryEntryRequest) (*UpdateDiaryEntryResponse, error)
	// 自分のプロフィールを表示する
	ShowMyProfile(context.Context, *ShowMyProfileRequest) (*ShowMyProfileResponse, error)
	// 他のプロフィールを表示する
	FindProfileByUserId(context.Context, *FindProfileByUserIdRequest) (*FindProfileByUserIdResponse, error)
	// プロフィールを更新する
	UpdateProfile(context.Context, *UpdateProfileRequest) (*UpdateProfileResponse, error)
}

func RegisterFamilogServer(s *grpc.Server, srv FamilogServer) {
	s.RegisterService(&_Familog_serviceDesc, srv)
}

func _Familog_StartDiary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartDiaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FamilogServer).StartDiary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/familog.Familog/StartDiary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FamilogServer).StartDiary(ctx, req.(*StartDiaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Familog_SubscribeDiary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeDiaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FamilogServer).SubscribeDiary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/familog.Familog/SubscribeDiary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FamilogServer).SubscribeDiary(ctx, req.(*SubscribeDiaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Familog_AllDiaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllDiariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FamilogServer).AllDiaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/familog.Familog/AllDiaries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FamilogServer).AllDiaries(ctx, req.(*AllDiariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Familog_FindDiaryEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDiaryEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FamilogServer).FindDiaryEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/familog.Familog/FindDiaryEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FamilogServer).FindDiaryEntries(ctx, req.(*FindDiaryEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Familog_ReadDiaryEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadDiaryEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FamilogServer).ReadDiaryEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/familog.Familog/ReadDiaryEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FamilogServer).ReadDiaryEntry(ctx, req.(*ReadDiaryEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Familog_PublishDiaryEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishDiaryEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FamilogServer).PublishDiaryEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/familog.Familog/PublishDiaryEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FamilogServer).PublishDiaryEntry(ctx, req.(*PublishDiaryEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Familog_UpdateDiaryEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDiaryEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FamilogServer).UpdateDiaryEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/familog.Familog/UpdateDiaryEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FamilogServer).UpdateDiaryEntry(ctx, req.(*UpdateDiaryEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Familog_ShowMyProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowMyProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FamilogServer).ShowMyProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/familog.Familog/ShowMyProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FamilogServer).ShowMyProfile(ctx, req.(*ShowMyProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Familog_FindProfileByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindProfileByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FamilogServer).FindProfileByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/familog.Familog/FindProfileByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FamilogServer).FindProfileByUserId(ctx, req.(*FindProfileByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Familog_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FamilogServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/familog.Familog/UpdateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FamilogServer).UpdateProfile(ctx, req.(*UpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Familog_serviceDesc = grpc.ServiceDesc{
	ServiceName: "familog.Familog",
	HandlerType: (*FamilogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartDiary",
			Handler:    _Familog_StartDiary_Handler,
		},
		{
			MethodName: "SubscribeDiary",
			Handler:    _Familog_SubscribeDiary_Handler,
		},
		{
			MethodName: "AllDiaries",
			Handler:    _Familog_AllDiaries_Handler,
		},
		{
			MethodName: "FindDiaryEntries",
			Handler:    _Familog_FindDiaryEntries_Handler,
		},
		{
			MethodName: "ReadDiaryEntry",
			Handler:    _Familog_ReadDiaryEntry_Handler,
		},
		{
			MethodName: "PublishDiaryEntry",
			Handler:    _Familog_PublishDiaryEntry_Handler,
		},
		{
			MethodName: "UpdateDiaryEntry",
			Handler:    _Familog_UpdateDiaryEntry_Handler,
		},
		{
			MethodName: "ShowMyProfile",
			Handler:    _Familog_ShowMyProfile_Handler,
		},
		{
			MethodName: "FindProfileByUserId",
			Handler:    _Familog_FindProfileByUserId_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _Familog_UpdateProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "familog.proto",
}

func init() { proto.RegisterFile("familog.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 918 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0x8e, 0xd3, 0xb4, 0x61, 0x4f, 0x36, 0xa1, 0x9d, 0xfe, 0x79, 0xbd, 0x6c, 0x9b, 0x1d, 0x2a,
	0x14, 0x90, 0x48, 0xa4, 0xb2, 0x48, 0xab, 0x95, 0x16, 0xd1, 0x02, 0x5d, 0x55, 0x08, 0xa9, 0xb8,
	0xed, 0x05, 0x08, 0x29, 0xb2, 0xe3, 0x69, 0x6a, 0x64, 0x67, 0xc2, 0x78, 0xbc, 0x90, 0x5b, 0x24,
	0x1e, 0x94, 0x27, 0xe0, 0x15, 0xd0, 0xfc, 0xd8, 0x1e, 0x27, 0x93, 0x6a, 0x61, 0xef, 0xe2, 0xf3,
	0xfb, 0x7d, 0xc7, 0xe7, 0x7c, 0x0e, 0x74, 0xef, 0x82, 0x34, 0x4e, 0xe8, 0x74, 0x38, 0x67, 0x94,
	0x53, 0xd4, 0xd6, 0x8f, 0xde, 0x67, 0xfc, 0x3e, 0x66, 0xd1, 0x3c, 0x60, 0x7c, 0x31, 0x9a, 0x52,
	0x3a, 0x4d, 0xc8, 0x48, 0x46, 0x84, 0xf9, 0xdd, 0x88, 0xc7, 0x29, 0xc9, 0x78, 0x90, 0xce, 0x55,
	0x12, 0xbe, 0x84, 0xd6, 0x6d, 0x46, 0x18, 0xea, 0x41, 0x33, 0x8e, 0x5c, 0xa7, 0xef, 0x0c, 0x36,
	0xfc, 0x66, 0x1c, 0x21, 0x04, 0xad, 0x59, 0x90, 0x12, 0xb7, 0xd9, 0x77, 0x06, 0x8f, 0x7c, 0xf9,
	0x1b, 0x3d, 0x03, 0x08, 0xde, 0x06, 0x3c, 0x60, 0xe3, 0x9c, 0x25, 0xee, 0x86, 0xf4, 0x3c, 0x52,
	0x96, 0x5b, 0x96, 0xe0, 0xcf, 0x61, 0xf3, 0xdb, 0x38, 0x60, 0x8b, 0x95, 0x5a, 0x7b, 0xb0, 0x79,
	0x13, 0xf3, 0xa4, 0x28, 0xa6, 0x1e, 0xf0, 0x3f, 0x0e, 0x80, 0x8c, 0xff, 0x6e, 0xc6, 0x2d, 0x49,
	0x08, 0x5a, 0x21, 0x8d, 0x16, 0x05, 0x00, 0xf1, 0x5b, 0x14, 0x22, 0x29, 0xfd, 0x35, 0xd6, 0xbd,
	0xd5, 0x03, 0x7a, 0x0e, 0xad, 0x3c, 0x23, 0xcc, 0x6d, 0xf5, 0x9d, 0x41, 0xe7, 0xb4, 0x3b, 0x2c,
	0xa6, 0x22, 0x78, 0xf9, 0xd2, 0x85, 0x3e, 0x81, 0x0f, 0x27, 0xf4, 0x2d, 0x61, 0xe3, 0x38, 0x0d,
	0xa6, 0x44, 0xc2, 0xdf, 0x94, 0x25, 0xba, 0xd2, 0x7c, 0x29, 0xac, 0xb7, 0x2c, 0x11, 0x0c, 0xcb,
	0x88, 0xcc, 0xdd, 0xea, 0x6f, 0x08, 0x86, 0xb1, 0xf6, 0x66, 0xe8, 0x35, 0x3c, 0x9e, 0xe7, 0x61,
	0x12, 0x67, 0xf7, 0x24, 0x1a, 0x07, 0xdc, 0x6d, 0xcb, 0x8e, 0xde, 0x50, 0x0d, 0x79, 0x58, 0x0c,
	0x79, 0x78, 0x53, 0x0c, 0xd9, 0xef, 0x94, 0xf1, 0x67, 0x1c, 0x7f, 0x0a, 0x3b, 0xd7, 0x3c, 0x60,
	0x5c, 0xb2, 0xf6, 0xc9, 0x6f, 0x39, 0xc9, 0xb8, 0xe0, 0xc4, 0xe5, 0x70, 0x1c, 0xc5, 0x49, 0x3e,
	0xe0, 0x57, 0x80, 0xcc, 0xd0, 0x6c, 0x4e, 0x67, 0x19, 0x41, 0x27, 0xb0, 0x19, 0x09, 0x83, 0x8c,
	0xed, 0x9c, 0xf6, 0x4a, 0xaa, 0x2a, 0x4c, 0x39, 0xf1, 0x4b, 0xd8, 0xbf, 0xce, 0xc3, 0x6c, 0xc2,
	0xe2, 0x90, 0xd4, 0x5a, 0x1d, 0x43, 0x27, 0x23, 0x13, 0x46, 0xf8, 0x78, 0x42, 0xa3, 0xa2, 0x21,
	0x28, 0xd3, 0x37, 0x34, 0x22, 0xd8, 0x85, 0x83, 0xe5, 0x4c, 0xd5, 0x19, 0xef, 0xc2, 0xce, 0x59,
	0x92, 0x08, 0x5b, 0x4c, 0x32, 0x5d, 0x0f, 0x7f, 0x05, 0xc8, 0x34, 0x6a, 0x90, 0x03, 0x68, 0x47,
	0xca, 0xe4, 0x3a, 0xfd, 0x0d, 0x0b, 0xcc, 0xc2, 0x8d, 0x5f, 0xc0, 0xe1, 0x45, 0x3c, 0x8b, 0xca,
	0x25, 0xa8, 0x4a, 0xa3, 0x27, 0xf0, 0x81, 0x24, 0x33, 0x2e, 0x77, 0x42, 0x66, 0x2d, 0x2e, 0x23,
	0x7c, 0x03, 0xee, 0x6a, 0x96, 0xee, 0xfd, 0x12, 0xba, 0x2a, 0x8d, 0x28, 0x87, 0x46, 0xb0, 0x5b,
	0x47, 0x20, 0x17, 0xce, 0x7f, 0x1c, 0x19, 0x15, 0xf0, 0x6b, 0xd8, 0xf7, 0x49, 0x10, 0x19, 0x7e,
	0x8d, 0xe4, 0x04, 0x7a, 0x55, 0x49, 0x03, 0x4f, 0x95, 0x2e, 0x40, 0xf9, 0x70, 0xb0, 0x9c, 0xfe,
	0xde, 0x90, 0xfe, 0x72, 0xa0, 0x57, 0x39, 0x2f, 0x28, 0x4b, 0xcb, 0xa3, 0x70, 0x6c, 0x47, 0xd1,
	0x34, 0x8f, 0x62, 0x00, 0xdb, 0xe6, 0xc6, 0x87, 0x09, 0x0d, 0xf5, 0xd5, 0xf4, 0xaa, 0x95, 0x3f,
	0x4f, 0x68, 0x28, 0xb6, 0xa2, 0x8a, 0xc9, 0xdc, 0x96, 0x5c, 0x7a, 0x75, 0x06, 0xc2, 0x9f, 0xe1,
	0x3f, 0xc0, 0xbd, 0x52, 0x5b, 0xbc, 0x3a, 0x9d, 0x33, 0xd8, 0x36, 0xa7, 0x73, 0x47, 0x59, 0xaa,
	0x97, 0xf3, 0xd0, 0x42, 0x50, 0x70, 0xf0, 0x7b, 0x51, 0x9d, 0x93, 0xf9, 0xaa, 0x9b, 0xf5, 0x57,
	0xfd, 0x23, 0x3c, 0xb1, 0x74, 0xd6, 0x83, 0x7d, 0x01, 0x1d, 0xa3, 0xb5, 0xee, 0x6a, 0x1d, 0x2b,
	0x54, 0x1d, 0xf1, 0x9f, 0x0e, 0x1c, 0xde, 0xce, 0xa3, 0x80, 0x93, 0xff, 0xf9, 0xaa, 0xad, 0x94,
	0x9b, 0xff, 0x89, 0x32, 0xbe, 0x02, 0x77, 0x15, 0xc3, 0x7b, 0xd1, 0x3a, 0x80, 0xbd, 0xeb, 0x7b,
	0xfa, 0xfb, 0x0f, 0x8b, 0x2b, 0x46, 0xef, 0xe2, 0x84, 0x14, 0x27, 0xfa, 0x0a, 0xf6, 0x97, 0xec,
	0xba, 0x4d, 0x21, 0x9a, 0xce, 0x5a, 0xd1, 0xc4, 0x5f, 0x82, 0x27, 0x0e, 0x4d, 0x67, 0x9e, 0x2f,
	0x84, 0xeb, 0x32, 0x2a, 0x86, 0x75, 0x08, 0x6d, 0x11, 0x55, 0x4d, 0x69, 0x2b, 0x97, 0x7e, 0xfc,
	0x35, 0x3c, 0xb5, 0xa6, 0xbd, 0x7b, 0xe3, 0xef, 0x61, 0x4f, 0x8d, 0xa7, 0x4e, 0xa6, 0xfc, 0x26,
	0x39, 0xc6, 0x37, 0xe9, 0x18, 0x3a, 0xfa, 0x9b, 0x24, 0x57, 0x5c, 0xdd, 0x80, 0xfe, 0x4c, 0x89,
	0xf5, 0x15, 0x13, 0x58, 0x2a, 0xf6, 0xce, 0x40, 0x4e, 0xff, 0xde, 0x82, 0xf6, 0x85, 0x32, 0xa3,
	0x37, 0x00, 0x95, 0x22, 0x23, 0xaf, 0x0c, 0x5f, 0x51, 0x74, 0xef, 0xa9, 0xd5, 0xa7, 0x85, 0xb4,
	0x81, 0xae, 0xa1, 0x57, 0x17, 0x59, 0x74, 0x54, 0x25, 0xd8, 0x74, 0xdb, 0x3b, 0x5e, 0xeb, 0x2f,
	0x8b, 0xbe, 0x01, 0xa8, 0xa4, 0xd8, 0x40, 0xb7, 0x22, 0xda, 0x06, 0xba, 0x55, 0xed, 0xc6, 0x0d,
	0xf4, 0x13, 0x6c, 0x2f, 0xab, 0x2b, 0xea, 0x97, 0x29, 0x6b, 0xe4, 0xda, 0x7b, 0xfe, 0x40, 0x84,
	0x49, 0xbc, 0xae, 0x91, 0x06, 0x71, 0xab, 0xf6, 0x1a, 0xc4, 0xed, 0xe2, 0x8a, 0x1b, 0xe8, 0x17,
	0xd8, 0x59, 0x91, 0x08, 0x54, 0xc1, 0x59, 0x27, 0x5c, 0x1e, 0x7e, 0x28, 0xc4, 0x9c, 0xc6, 0xf2,
	0xa1, 0x1a, 0xd3, 0x58, 0xa3, 0x23, 0xc6, 0x34, 0xd6, 0x5d, 0x39, 0x6e, 0xa0, 0x2b, 0xe8, 0xd6,
	0x2e, 0x13, 0x3d, 0xab, 0xde, 0xb2, 0xe5, 0x92, 0xbd, 0xa3, 0x75, 0xee, 0xb2, 0x62, 0x08, 0xbb,
	0x96, 0xc3, 0x43, 0x1f, 0xd7, 0xde, 0x8d, 0xfd, 0x9a, 0xbd, 0x93, 0x87, 0x83, 0x4c, 0xd4, 0xb5,
	0x6b, 0x32, 0x50, 0xdb, 0x4e, 0xd6, 0x40, 0x6d, 0x3d, 0x42, 0xdc, 0x38, 0x3f, 0xfa, 0xf9, 0xa3,
	0x69, 0xcc, 0xef, 0xf3, 0x70, 0x38, 0xa1, 0xe9, 0x28, 0xcb, 0xf3, 0x2c, 0x98, 0x9d, 0x4e, 0xe9,
	0x48, 0xe7, 0x85, 0x5b, 0xf2, 0x5f, 0xd5, 0x17, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x3e, 0x86,
	0xbe, 0x2a, 0xed, 0x0a, 0x00, 0x00,
}
